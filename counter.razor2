@page "/game-of-life"
 
<h1>Game Of Live</h1>
<p>Current count: @currentCount and current radio @theRadio</p>
 
<hr />
 
<p>
    <input type="radio" name="myradiobtn" checked="@(theRadio.Equals("step"))" value="step" @onchange="ClickRadio" />
    Step by step
    <input type="radio" name="myradiobtn" checked="@(theRadio.Equals("many"))" value="many" @onchange="ClickRadio" />
    Several steps
</p>
 
 
<div style="display:@(theRadio.Equals("many") ? "block" : "none")">
    @* <h5>Cycles specification</h5>
        Number of cycles:
        <input @bind="cyclesPerTime" /> (internal value: @cyclesPerTime)
        <hr /> *@
 
    <h5>Cycles specification</h5>
    Number of cycles:
    <select @bind="cyclesPerTime">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select> (internal value: @cyclesPerTime)
    <hr />
</div>
 
<button class="btn btn-primary" @onclick="IncrementCount">Next</button>
 
 
<a class="btn btn-primary" target="_blank" href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_life">Look for
    Patterns in Wikipedia</a>
 
<div class="mt-3">
    <button class="btn btn-primary" @onclick="AddPatternRow">@addPatternText</button>
 
    <div class="my-3" style="display:@(addPatternHidden == true ? "none" : "block")">
 
        <label>row <input class="form-control" type="number" @bind="row"> </label>
        <label>col <input class="form-control" type="number" @bind="col"></label>
        <label>Pattern <select class="form-control" @bind="patternType">
                <option value="Pentadecathlon">Pentadecathlon</option>
                <option value="Toad">Toad</option>
                <option value="Pulsar">Pulsar</option>
            </select>
        </label>
        <button class="btn btn-primary" @onclick="AddPattern">Add @patternType Pattern</button>
    </div>
 
    <button class="btn btn-primary" @onclick="AddCells">@addCellsText</button>
 
    <div class="my-3" style="display:@(addCellsHidden == true ? "none" : "block")">
 
        <label>Enter Cells(x,y) <textarea class="form-control" @bind="textAreaCells"></textarea>
            <button class="btn btn-primary mt-2" @onclick="AddCell">Add cell</button>
        </label>
 
    </div>
 
 
</div>
 
 
<hr />
<table class="environment">
    @for (int i = 0; i < @e.total_of_rows(); i++)
    {
        <tr>
            @for (int j = 0; j < @e.total_of_cols(); j++)
            {
                @if (e.is_alive(i, j))
                {
                    <td class="cell alive"/>
                }
                else
                {
                    <td class="cell dead"/>
                }
            }
        </tr>
    }
</table>
 
<hr />
 
@code {
    private int cyclesPerTime = 0;
    private int currentCount = 0;
 
    private string theRadio = "";
 
    private bool addPatternHidden = true;
    private bool addCellsHidden = true;
    private string addPatternText = "Add pattern...";
    private string addCellsText = "Add cells ...";
 
    private string patternType = "Pentadecathlon";
    private int row = 0;
    private int col = 0;
 
    private string textAreaCells = "";
 
 
    private Data.GameOfLife.Environment e = new Data.GameOfLife.Environment(30, 30);
 
    private void IncrementCount()
    {
        currentCount++;
        e.nextConwayStep();
    }
 
    private void ClickRadio(ChangeEventArgs args)
    {
        this.theRadio = args.Value.ToString();
 
        currentCount++;
    }
 
    private void AddPatternRow()
    {
        addPatternText = "Add pattern " + (addPatternHidden ? "(-)" : "...");
 
        addPatternHidden = !addPatternHidden;
    }
 
    private void AddPattern()
    {
        e.put_pattern(row, col, patternType);
 
        row = col = 0;
    }
 
    private void AddCells()
    {
        addCellsText = "Add cells " + (addCellsHidden ? "(-)" : "...");
 
        addCellsHidden = !addCellsHidden;
    }
 
    private void AddCell()
    {
        string[] cells = textAreaCells.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
 
        foreach (string cell in cells)
        {
            var devidedCells = cell.Split(',');
            e.insert(int.Parse(devidedCells[0]), int.Parse(devidedCells[1]), new Data.GameOfLife.BioUnit(true));
        }
 
        textAreaCells = "";
    }
}
 
